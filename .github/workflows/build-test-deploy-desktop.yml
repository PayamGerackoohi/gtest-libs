name: Build, Test and Deployment on Desktop Platforms (Ubuntu, MacOS, Windows)

on: 
  workflow_dispatch:
    inputs:
      version:
        description: 'GTest Version'
        required: true
        type: string
        default: '1.14.0'

env:
  version: ${{ inputs.version }}
  install-name: gtest

jobs:
  cache-source:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Check if the version is not in the release list
        id: check-version
        shell: bash
        run: |
          tag=`gh release list | grep -w v${{ env.version }} || :`
          if [[ -n "$tag" ]]; then
            echo GTest v${{ env.version }} is already released.
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Cache the source
        uses: actions/cache@v3.3.2
        id: cache
        with:
          path: source
          key: gtest-source-${{ env.version }}

      - name: Download the source
        if: steps.cache.outputs.cache-hit != 'true'
        run: >
          mkdir -p source;
          curl -L
          -o source/source.tgz
          https://github.com/google/googletest/archive/refs/tags/v${{ env.version }}.tar.gz

  build:
    runs-on: ${{ matrix.os }}
    needs: cache-source
    strategy:
      fail-fast: false
      matrix:
        os: 
          - ubuntu-latest
          - macos-latest
          - windows-latest
        build_type: [Release]
        include:
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
    steps:
      - name: Restore the cached source
        uses: actions/cache/restore@v3.3.2
        with:
          path: source
          key: gtest-source-${{ env.version }}
          enableCrossOsArchive: true

      - name: strings
        id: strings
        shell: bash
        run: echo "gtest-lib=gtest-${{ env.version }}-${{ runner.os }}" >> "$GITHUB_OUTPUT"

      - name: Decompress the source
        shell: bash
        run: tar -xzf source/source.tgz

      - name: Build
        working-directory: ${{ github.workspace }}/googletest-${{ env.version }}
        run: |
          cmake -Bbuild -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/${{ env.install-name }} -Dgtest_force_shared_crt=ON
          cmake --build build --config Release
          cmake --build build --target install --config Release

      - name: Compress the library
        shell: bash
        run: |
          tar -czf ${{ steps.strings.outputs.gtest-lib }}.tgz -C ${{ env.install-name }} .

      - name: Archive the artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.strings.outputs.gtest-lib }}
          path: ${{ steps.strings.outputs.gtest-lib }}.tgz

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Download the artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: make release
        run: >
          gh release create v${{ env.version }}
          dist/**/*.tgz
          --generate-notes
          --title "Version ${{ env.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
